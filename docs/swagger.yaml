basePath: /
definitions:
  dto.CommentRequest:
    properties:
      content:
        type: string
      postId:
        format: uuid
        type: string
    required:
    - content
    - postId
    type: object
  dto.CommentResponse:
    properties:
      content:
        type: string
      id:
        type: string
      postId:
        type: string
      userId:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      password:
        minLength: 8
        type: string
      username_or_email:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - password
    - username_or_email
    type: object
  dto.PostDetailResp:
    properties:
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      content:
        type: string
      id:
        type: string
      title:
        type: string
      userId:
        type: string
    type: object
  dto.PostReq:
    properties:
      content:
        maxLength: 1000
        minLength: 5
        type: string
      title:
        maxLength: 50
        minLength: 5
        type: string
    required:
    - content
    - title
    type: object
  dto.PostResp:
    properties:
      content:
        type: string
      id:
        type: string
      title:
        type: string
      userId:
        type: string
    type: object
  dto.UserRequest:
    properties:
      email:
        type: string
      firstName:
        maxLength: 50
        minLength: 2
        type: string
      lastName:
        maxLength: 50
        minLength: 2
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    - username
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      username:
        type: string
    type: object
  models.Comment:
    properties:
      content:
        type: string
      id:
        type: string
      postId:
        type: string
      userId:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
host: localhost:4000
info:
  contact: {}
  description: Bu API, bir blog uygulamasına ait tüm endpointleri içerir.
  title: Go Blog API
  version: "1.0"
paths:
  /comments:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all comments
      produces:
      - application/json
      responses:
        "200":
          description: Empty array if no comments
          schema:
            items:
              $ref: '#/definitions/dto.CommentResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all comments
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Create a new comment
      parameters:
      - description: Yorum bilgileri
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/dto.CommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Create a new comment
      tags:
      - comments
  /comments/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a comment with the specified ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Delete a comment by ID
      tags:
      - comments
    get:
      consumes:
      - application/json
      description: Retrieve a comment by its unique ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get a comment by id
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update a comment with the provided ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      - description: Yorum bilgileri
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/dto.CommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Update a comment by ID
      tags:
      - comments
  /posts:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all posts
      produces:
      - application/json
      responses:
        "200":
          description: Empty array if no posts
          schema:
            items:
              $ref: '#/definitions/dto.PostResp'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new post with the provided data
      parameters:
      - description: Post bilgileri
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/dto.PostReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PostResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a post with the specified ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Delete a post by ID
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Retrieve a post by its unique ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PostDetailResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get a post by ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update a post with the provided ID and data
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Post bilgileri
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/dto.PostReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PostResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Update a post by ID
      tags:
      - posts
  /users:
    get:
      consumes:
      - application/json
      description: Veritabanındaki tüm kullanıcıları listeler.
      produces:
      - application/json
      responses:
        "200":
          description: Empty array if no users
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Tüm kullanıcıları getir
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: ID'sine göre kullanıcıyı getirir.
      parameters:
      - description: Kullanıcı ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Belirli bir kullanıcıyı getir
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Kullanıcının giriş yapmasını sağlar ve JWT token döner.
      parameters:
      - description: Kullanıcı adı veya email ve şifre
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Kullanıcı girişi
      tags:
      - users
  /users/logout:
    get:
      consumes:
      - application/json
      description: Kullanıcının çıkış yapmasını sağlar.
      produces:
      - application/json
      responses:
        "200":
          description: Çıkış Başarılı
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Kullanıcı çıkışı
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Yeni bir kullanıcı oluşturur.
      parameters:
      - description: Kullanıcı bilgileri
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Kullanıcı kaydı
      tags:
      - users
swagger: "2.0"
